#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Arbre {
    int idroute;
    char nom[50];
    float somme;
    int equilibre;
    struct Arbre* fg;
    struct Arbre* fd;
} Arbre;

typedef Arbre* pArbre;

// Fonction pour créer un nouvel élément dans l'arbre
pArbre creerArbre(int routeid, float valeur, char nom[50]) {
    pArbre newarbre = (pArbre)malloc(sizeof(Arbre));
    if (newarbre != NULL) {
        strcpy(newarbre->nom, nom);
        newarbre->equilibre = 0;
        newarbre->idroute = routeid;
        newarbre->somme = valeur;
        newarbre->fg = NULL;
        newarbre->fd = NULL;
    }
    return newarbre;
}

pArbre insertionAVLsomme(pArbre a, int routeid, float valeur, char nom[50], int* h) {
    if (a == NULL) {
        *h = 1;
        return creerArbre(routeid, valeur, nom);
    } else if (routeid < a->idroute) {
        a->fg = insertionAVLsomme(a->fg, routeid, valeur, nom, h);
        a->equilibre -= *h;
    } else if (routeid > a->idroute) {
        a->fd = insertionAVLsomme(a->fd, routeid, valeur, nom, h);
        a->equilibre += *h;
    } else {
        // Si le trajet existe déjà, additionne la distance
        a->somme += valeur;
        *h = 0;
        return a;
    }

    if (*h != 0) {
        a->equilibre = a->equilibre + *h;

        if (a->equilibre == 0) {
            *h = 0;
        } else {
            *h = 1;
        }
    }
    return a;
}

void ecrireDansFichier(pArbre a, FILE* fichier) {
    if (a != NULL) {
        ecrireDansFichier(a->fd, fichier);
        fprintf(fichier, "%d;%f;%s\n", a->idroute, a->somme, a->nom);
        ecrireDansFichier(a->fg, fichier);
    }
}

void recuperer10PlusGrandes(pArbre a, int* compteur, FILE* fichier) {
    if (a != NULL && *compteur < 10) {
        recuperer10PlusGrandes(a->fd, compteur, fichier);
        if (*compteur < 10) {
            fprintf(fichier, "%d;%f;%s\n", a->idroute, a->somme, a->nom);
            (*compteur)++;
        }
        recuperer10PlusGrandes(a->fg, compteur, fichier);
    }
}

pArbre traitement2() {
    int h = 0;
    int* ph = &h;
    pArbre arbre = NULL;
    FILE* fichier = fopen("d2.txt", "r");

    if (fichier != NULL) {
        char ligne[100];
        while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
            int routeid;
            float distance;
            char nom[50];
            sscanf(ligne, "%d;%f;%[^\n]", &routeid, &distance, nom);
            arbre = insertionAVLsomme(arbre, routeid, distance, nom, ph);
        }
        fclose(fichier);
    }
    return arbre;
}

int main() {
    pArbre arbre = NULL;
    int compteur = 0;

    arbre = traitement2();

    FILE* fichier = fopen("d2.txt", "w");  // Ouvrir en mode écriture pour écraser le contenu existant

    if (fichier != NULL) {
        // Écrire les 10 distances les plus grandes avec le même identifiant de trajet agrégé
        recuperer10PlusGrandes(arbre, &compteur, fichier);

        fclose(fichier);
    } else {
        printf("Erreur lors de l'ouverture du fichier en mode écriture.\n");
    }

    free(arbre);  // Libérer la mémoire de l'arbre

    return 0;
}
