#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Arbre {
    char nom[50];
    float somme;
    int equilibre;
    struct Arbre* fg;
    struct Arbre* fd;
} Arbre;

typedef Arbre* pArbre;

pArbre creerArbre(char nom[50], float distance) {
    pArbre newarbre = (pArbre)malloc(sizeof(Arbre));
    if (newarbre != NULL) {
        strcpy(newarbre->nom, nom);
        newarbre->equilibre = 0;
        newarbre->somme = distance;
        newarbre->fg = NULL;
        newarbre->fd = NULL;
    }
    return newarbre;
}

pArbre insertionAVLsomme(pArbre a, char nom[50], float distance, int* h) {
    if (a == NULL) {
        *h = 1;
        return creerArbre(nom, distance);
    } else if (strcmp(nom, a->nom) < 0) {
        a->fg = insertionAVLsomme(a->fg, nom, distance, h);
        a->equilibre -= *h;
    } else if (strcmp(nom, a->nom) > 0) {
        a->fd = insertionAVLsomme(a->fd, nom, distance, h);
        a->equilibre += *h;
    } else {
        // Ajout de la somme des distances pour le même conducteur
        a->somme += distance;
        *h = 0;
        return a;
    }

    if (*h != 0) {
        a->equilibre = a->equilibre + *h;

        if (a->equilibre == 0) {
            *h = 0;
        } else {
            *h = 1;
        }
    }
    return a;
}

void ecrireDansFichier(pArbre a, FILE* fichier) {
    if (a != NULL) {
        ecrireDansFichier(a->fd, fichier);
        fprintf(fichier, "%s;%f\n", a->nom, a->somme);
        ecrireDansFichier(a->fg, fichier);
    }
}

void recuptrajet(pArbre a, pArbre plusVille[10]) {
    if (a != NULL) {
        for (int i = 0; i < 10; i++) {
            if (plusVille[i] == NULL || a->somme > plusVille[i]->somme) {
                for (int j = 9; j > i; j--) {
                    plusVille[j] = plusVille[j - 1];
                }
                plusVille[i] = a;
                break;
            }
        }
        recuptrajet(a->fg, plusVille);
        recuptrajet(a->fd, plusVille);
    }
}

void triedecroissantdistance(pArbre plusVille[10]) {
    pArbre temp;
    int n = 10;

    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (plusVille[j]->somme < plusVille[j + 1]->somme) {
                temp = plusVille[j];
                plusVille[j] = plusVille[j + 1];
                plusVille[j + 1] = temp;
            }
        }
    }
}

pArbre traitement2() {
    int h = 0;
    int* ph = &h;
    pArbre arbre = NULL;
    FILE* fichier = fopen("L.txt", "r");

    if (fichier != NULL) {
        char ligne[100];
        while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
            char nom[50];
            float distance;
            sscanf(ligne, "%*d;%f;%[^\n]", &distance, nom);
            arbre = insertionAVLsomme(arbre, nom, distance, ph);
        }
        fclose(fichier);
    }
    return arbre;
}

int main() {
    pArbre arbre = NULL;
    pArbre trajetsMax[10] = {NULL};

    arbre = traitement2();

    recuptrajet(arbre, trajetsMax);
    triedecroissantdistance(trajetsMax);

    FILE* fichier = fopen("d2.txt", "w");

    if (fichier != NULL) {
        for (int i = 0; i < 10; i++) {
            if (trajetsMax[i] != NULL) {
                fprintf(fichier, "%s;%f\n", trajetsMax[i]->nom, trajetsMax[i]->somme);
            }
        }
        fclose(fichier);
    } else {
        printf("Erreur lors de l'ouverture du fichier en mode écriture.\n");
    }

    free(arbre);

    return 0;
}
